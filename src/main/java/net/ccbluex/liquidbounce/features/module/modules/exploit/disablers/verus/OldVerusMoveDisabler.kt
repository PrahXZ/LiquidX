package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.verus

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.features.value.*
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import java.util.*
import kotlin.math.roundToInt
import kotlin.math.sqrt

class OldVerusMoveDisabler : DisablerMode("OldVerusMove") {
    private var currentTrans = 0
    private var verus2Stat = false
    private val verusSlientFlagApplyValue = BoolValue("${valuePrefix}SlientFlagApply", false)
    private val verusRepeatTimesValue = IntegerValue("${valuePrefix}RepeatTimes", 1, 1, 5)
    private val verusRepeatTimesFightingValue = IntegerValue("${valuePrefix}RepeatTimesFighting", 1, 1, 5)
    private val repeatTimes: Int
        get() = if(LiquidBounce.combatManager.inCombat) { verusRepeatTimesFightingValue.get() } else { verusRepeatTimesValue.get() }
    private val packetBuffer = LinkedList<Packet<INetHandlerPlayServer>>()
    override fun onEnable() {
        currentTrans = 0
        verus2Stat = false
        packetBuffer.clear()
    }
    override fun onWorld(event: WorldEvent) {
        currentTrans = 0
        verus2Stat = false
        packetBuffer.clear()
    }

    override fun onUpdate(event: UpdateEvent) {
        // Partially drain the queue every 180 ticks (9 seconds), to prevent flagging Ping Spoof.
        if (mc.thePlayer.ticksExisted % 180 == 0) {
            // grab packets until the queue size is 22 or less.
            while (packetBuffer.size > 22) {
                // grab 1 packet, send and then remove it from the queue
                PacketUtils.sendPacketNoEvent(packetBuffer[0])
                packetBuffer.removeAt(0)
            }
        }
    }
    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (mc.thePlayer != null && mc.thePlayer.ticksExisted == 0) packetBuffer.clear()
        if (packet is C03PacketPlayer) {
            // Set position to a valid block height (so Spoof NoFall works)
            val yPos = (mc.thePlayer.posY / 0.015625).roundToInt() * 0.015625
            mc.thePlayer.setPosition(mc.thePlayer.posX, yPos, mc.thePlayer.posZ)
            if (mc.thePlayer.ticksExisted % 45 == 0) {
                // Clip into ground and silently accept the teleport from the server. (This fucks with teleport compensation LOL)
                PacketUtils.sendPacketNoEvent(
                    C03PacketPlayer.C04PacketPlayerPosition(
                        mc.thePlayer.posX,
                        mc.thePlayer.posY,
                        mc.thePlayer.posZ,
                        true
                    )
                )
                PacketUtils.sendPacketNoEvent(
                    C03PacketPlayer.C04PacketPlayerPosition(
                        mc.thePlayer.posX,
                        mc.thePlayer.posY - 11.725,
                        mc.thePlayer.posZ,
                        false
                    )
                )
                PacketUtils.sendPacketNoEvent(
                    C03PacketPlayer.C04PacketPlayerPosition(
                        mc.thePlayer.posX,
                        mc.thePlayer.posY,
                        mc.thePlayer.posZ,
                        true
                    )
                )
            }
        } else if (packet is S08PacketPlayerPosLook && verusSlientFlagApplyValue.get()) {
            val x = packet.x - mc.thePlayer.posX
            val y = packet.y - mc.thePlayer.posY
            val z = packet.z - mc.thePlayer.posZ
            val diff = sqrt(x * x + y * y + z * z)
            // Cancel the teleport, and silently accept it.
            if (diff <= 8) {
                event.cancelEvent()
                // LATEST verus ALWAYS expects a c06 within 30 seconds of a teleport if packets have been sent from the client after the teleport.
                PacketUtils.sendPacketNoEvent(
                    C03PacketPlayer.C06PacketPlayerPosLook(
                        packet.x,
                        packet.y,
                        packet.z,
                        packet.getYaw(),
                        packet.getPitch(),
                        true
                    )
                )
            }
        } else if (packet is C0FPacketConfirmTransaction) {
            repeat(repeatTimes) {
                // Make sure to dupe packets 4 times, since it will match up with the missing packets while keeping the anticheat disabled, in order to bypass ping spoof checks
                // why the fuck do they not checked duped transactions? LMFAO
                packetBuffer.add(packet)
                event.cancelEvent()
            }
        }
    }
}