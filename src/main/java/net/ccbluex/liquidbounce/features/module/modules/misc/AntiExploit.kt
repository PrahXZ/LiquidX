// LiquidX Development by PrahXZ and Haflin with FDP Base modified. v2.0 R1
package net.ccbluex.liquidbounce.features.module.modules.misc

import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.features.value.*
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import net.minecraft.network.play.server.S0EPacketSpawnObject
import net.minecraft.network.play.server.S2BPacketChangeGameState
import net.minecraft.network.play.server.S3EPacketTeams

@ModuleInfo(name = "AntiExploit", category = ModuleCategory.MISC, array = false)
class AntiExploit : Module() {
    init {
        state = true
    }

    private val notifyValue = BoolValue("Notify", false)
    private val guardianValue = BoolValue("LessGuardian", true)
    private val hycraftValue = BoolValue("HyCraft-AntiCrash", false)
    private val maxArrowSpawn = IntegerValue("MaxArrowPerSecond", 100, 1, 1000)

    private var tick = 0
    private var arrowMax = 0
    private var guardianEffect = false

    private fun sendMessage(s: String, force: Boolean = false) {
        if (notifyValue.get() || force)ClientUtils.displayChatMessage("§7[§a§lAntiExploit§7]§6 $s")
    }

    override fun onDisable() {
        sendMessage("We highly recommend you to keep this module, AntiExploit enabled.", true)
    }

    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet

        if(hycraftValue.get()) {
            if(packet is S3EPacketTeams) {
                event.cancelEvent()
            }
            if (packet is S08PacketPlayerPosLook) {
                val x = packet.x
                val y = packet.y
                val z = packet.z

                if (x >= 200000 || x <= -200000 ||
                        y >= 200000 || y <= -200000 ||
                        z >= 200000 || z <= -200000) {
                    mc.netHandler.networkManager.sendPacket(C03PacketPlayer.C06PacketPlayerPosLook(x, y, z, packet.getYaw(), packet.getPitch(), false)  )
                    event.cancelEvent()
                }
            }
        }

        if (packet is S2BPacketChangeGameState) {
            when(packet.gameState) {
                5 -> {
                    if(!mc.isDemo) {
                        event.cancelEvent()
                        sendMessage("Illegal Demo GUI.")
                    }
                }
                10 -> {
                    if(guardianValue.get()) {
                        if (!guardianEffect) {
                            guardianEffect = true
                        } else {
                            event.cancelEvent()
                            sendMessage("Limited Guardian Effect.")
                        }
                    }

                }
            }
        }

        if (packet is S0EPacketSpawnObject && packet.type == 60) {
            if (arrowMax++ > maxArrowSpawn.get()) {
                event.cancelEvent()
                sendMessage("Reached max arrow spawn per second.")
            }
        }
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        if (tick++ >= 20) {
            tick = 0
            arrowMax = 0
            guardianEffect = false
        }
    }

}